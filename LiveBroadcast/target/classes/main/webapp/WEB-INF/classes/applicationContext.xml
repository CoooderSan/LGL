<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
						default-lazy-init="false" >

	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/> <property 
		name="username" value="root"/> <property name="password" value="root"/> <property 
		name="url" value="jdbc:mysql://192.168.1.218:3306/db_wxmain?Unicode=true&amp;characterEncoding=UTF-8"/> 
		</bean> -->


	<context:component-scan base-package="liveInit">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 自动扫描组件，这里要把controler下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
	<context:component-scan base-package="liveInit">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 读取properties配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:cache.properties</value>
			</list>
		</property>
	</bean>


	<!-- redis连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxActive" value="${redis.maxActive}" />
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<property name="minIdle" value="${redis.minIdle}"/>
		<property name="maxWait" value="${redis.maxWait}"/>
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.server}" />
		<constructor-arg index="2" value="${redis.port}" type="int" />
	</bean>


	<bean id="redisTemplate" class="util.JedisUtil">

		  <property name="jedisPool" ref="jedisPool"/>  
	</bean>

	<!-- mysql 多数据源配置 -->
	<!-- <bean id="dataSourceWR" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:comp/env/jndi/bqlh_wr_ibatis"></property> 
		</bean> <bean id="dataSourceR" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:comp/env/jndi/bqlh_r_ibatis"></property> 
		</bean> <bean id="dynamicMap" class="java.util.HashMap"> <constructor-arg> 
		<map> <entry key="dataSourceWR" value-ref="dataSourceWR"/> <entry key="dataSourceR" 
		value-ref="dataSourceR"/> </map> </constructor-arg> </bean> <bean id="dynamicDataSource" 
		class="liveInit.system.util.DynamicDataSource"> <property name="targetDataSources" 
		ref="dynamicMap"/> <property name="defaultTargetDataSource" ref="dataSourceR"/> 
		</bean> -->

	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jndi/sfj_ibatis"></property>
	</bean> -->

	<!-- JDBC模板 -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		abstract="false" lazy-init="false" autowire="default">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:sql-map-config.xml" />
		<property name="mapperLocations">
			<list>
				自动匹配Mapper映射文件
				<value>classpath*:mybatis/**/*-mapper.xml</value>
			</list>
		</property>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean> -->

	<!-- 扫描 basePackage下所有的接口，根据对应的mapper.xml为其生成代理类 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="liveInit.*.mapper" />
	</bean> -->

	<!-- <bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean> -->

	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*delete*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="*insert*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="*update*" propagation="REQUIRED"
				read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="*save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="*add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="batch*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice> -->

	<!-- <aop:config proxy-target-class="true">
		<aop:pointcut id="pc"
			expression="execution(* liveInit.*.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config> -->
	
</beans>